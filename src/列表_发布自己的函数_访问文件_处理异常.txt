列表就像是数组
 	调用函数使用（点记法） name.函数名（）
▪ print（”输出函数print”）
•列表
1.创建列表      >>> movies = ["The Honly Grail","The LIfe Brian ","the meaning of life"]
2.输出列表长度>>> print(len(movies))
3.输出列表    >>> print(movies)
4.像列表最后加入数据>>> movies.append("hello")
5.删除列表最后一个位置的数据>>> movies.pop()
6.向列表中插入多个数据>>> movies.extend(["agadgfg","adfgadgadg"])
7.删除指定数据>>> movies.remove("agadgfg")
8.向指定位置插入数据>>> movies.insert(0,"adfgadgadg") 

处理列表数据
  		迭代处理
1.
	for 循环 
	>>> for each_flick in movies：
	print(each_flick)
	
The Honly Grail
The LIfe Brian 
the meaning of life

2.
	while循环
>>> count = 0
>>> while count < len(movies):
	print(movies[count])
	count = count+1
                                 															***	  IndexEorr 越界
							>>> print(movies[5])
							Traceback (most recent call last):
 							 	File "<pyshell#56>", line 1, in <module>
   								 	print(movies[5])
							IndexError: list index out of range
 									****大小写敏感，名字错误
								
 									NameError: name 'movice' is not defined

 *****&&&&&&&********&&&&&&&
查看python内置方法列表BIF
		>>>dir(__builtins__)
功能描述
		>>> help(BIFname)
	eg	>>> help(vars)
*****&&&&&&&********&&&&&&&
3.当列表中有另一个列表时如果使用for循环只会输出列表，将列表当作一个元素处理
		
>>> test = ["name","dfaa",["hello","saasdf","asfdadf"],"end"]
>>> for i in test:
	print(i)

	
name
dfaa
['hello', 'saasdf', 'asfdadf']
end

——————————
	通过isinstance()检查，并嵌套   if。。。else可输出所有元素

>>> for i in test:
	if isinstance(i,list):
		for e in i:
			print(e)
	else:
		print(i)

		
name
dfaa
hello
saasdf
asfdadf
end
>>>—————————————
4.创建一个函数
test = ["name","dfaa",["hello","saasdf",["asfdadf","end"]]]

def print_lol(this):
	for i in this:
		if isinstance(i,list):
			print_lol(i)
		else:
			print(i)

>>>————————————————
5.将函数发布

ps:(首先要在用户目标目录下创建一个  ~/.pypirc 文件
        用于配置用户信息
        此处特地说明：创建.pypirc 的目录为：C:\Users\xxx-q001（你的计算机名）。
        创建时可以先创建一个txt文件，填入响应内容后修改文件名。
        修改时改为.pypirc.保存即可。 注意后面一定要加一个.
        
---------------------文件内容---------------
[distutils]
index-servers =
    pypi
    pypitest

[pypi]
repository: https://upload.pypi.org/pypi
username:username
password: password



----------------------------

        )

    <1	创建一个文件夹，创建setup.py文件
    <2  编辑文件内容:

                -----------------------------------------------
                from distutils.core import setup
                
                setup(
                    name   ="tan-nester",
                    version     =  '1.3.0',
                    py_modules = ['tan_nester'],
                    author  ='tanxvyang',
                    author_email='1173195180@qq.com',
                    url='',
                    description='A simple printer of nested lists'
                )


-----------------------------------------------

        <3.注册
                 python  setup.py sdist   //构建一个发布文件
            
        <4.      Python setup.py install   //将发布安装到自己的机器中
            
        <5.      Python setup.py register    //一台机器只需要执行一次
            
        <6 .      python  setup.py sdist upload  //上传软件发布


----------------------------------------------------------------------
                                    文件与异常

1.访问外部文件




>>> import os                             //导入os模块
>>> os.getcwd()                //查看当前工作空间
'D:\\package\\Python'
>>> os.chdir('E:\GitHub\Python-')  //切换为包含,目标文件的文件夹
>>> os.getcwd()                     //确认目标位置
'E:\\GitHub\\Python-'
**>>> data = open('see.txt')            //打开一个命名文件,将其赋至一个名为'data'的文件对象
>>> print(data.readline(), end='')      //使用"readline()"方法从文件获得一个数据行,使用print() BIF在屏幕上显示该数据行
asdgsdgsdfghsfghfgh
>>> 

回退到文件起始位置,使用for语句处理文件中的每一行:

>>> data.seek(0)
0
>>> for each_line in data:
	print(each_line,end='')


    关闭文件

    2.data.close()


    >>> for each_line in data:
	print(each_line,end='')
//已关闭的文件不能在访问
	
Traceback (most recent call last):
  File "<pyshell#16>", line 1, in <module>
    for each_line in data:
ValueError: I/O operation on closed file.  

---------------------------------------------------------------
进一步查看数据
Man: Is this the right room for an argument?
Other Man: I've told you once.
演员角色+:+演员台词,分为三部分

可以将其分开为两部分   以:为界    使用BIF  split()方法   split(':')   参数会告诉split()根据什么来分解
                                            split()方法会返回一个字符串列表,这会赋至一个目标标识符列表,这成为多重赋值(multiple assignment)
               (role,line_spoken)=each_line.split(":")

****
 os.getcwd()
'E:\\GitHub\\Python-\\src\\day04'
>>> data = open('sktetch.txt')
>>> for each_line in data:
	(rloe,line_spoken)=each_line.split(':')
	print(rloe,end='')
	print('said:',end='')
	print(line_spoken,end='')

	
Mansaid: Is this the right room for an argument?
Other Mansaid: I've told you once.
Mansaid: No you haven't!
Other Mansaid: Yes I have.
Mansaid: When?
Other Mansaid: Just now.
Mansaid: No you didn't!
Other Mansaid: Yes I did!
Mansaid: You didn't!
Other Mansaid: I'm telling you, I did!
Mansaid: You did not!
Other Mansaid: Oh I'm sorry, is this a five minute argument, or the full half hour?
Mansaid: Ah! (taking out his wallet and paying) Just the five minutes.
Other Mansaid: Just the five minutes. Thank you.
Other Mansaid: Anyway, I did.
Mansaid: You most certainly did not!      //这行的下一行出现错误
Traceback (most recent call last):
  File "<pyshell#21>", line 2, in <module>
    (rloe,line_spoken)=each_line.split(':')
ValueError: too many values to unpack (expected 2)              //严重错误!   ValueError  值太多
                                                                        |                                    |   
                                                                        V                                    V
>                                                               ther Man: Now let's get one thing quite clear: I most definitely told you!
                                                                        这行有两个":",正是因为这个多出来的:,导致了split()方法无法正常工作


***************====================================restart==============


help(each_line.split())  //查看方法的使用说明
可以通过split(':',1) 可以赋值以确定分页条件
| |  =========================================================================

| |  1.增加额外的逻辑
| |  data = open('sktetch.txt')
| |  for each_line in data:
| |      if not each_line.find(':') == -1:
| |             (rloe,line_spoken)=each_line.split(':', 1)
| |             print(rloe, end='')
| |             print('  said: ', end='')
| |             print(line_spoken, end='')
| |  data.close()| |  

| |      ###finish
| |      | |  

| |      -------------------------------------处理异常------------------------------
| |  2.允许这类错误  :  异常处理
| |  data = open('sktetch.txt')
| |  for each_line in data:
| |      try:
| |             (rloe,line_spoken)=each_line.split(':', 1)
| |             print(rloe, end='')
| |             print(' said: ', end='')
| |             print(line_spoken, end='')
| |      except:
| |          pass       //pass 放过这个错误
| |      
| |  data.close()
======================================================================================

        以上两种方法显然都是可行的,但如果遇到其他错误呢? 比如文件被删除  这将导致一个 IOError

                FileNotFoundError: [Errno 2] No such file or directory: 'sktetch.txt'

        ps:这就需要增加跟多的错误检查代码
==========================================================================
test01:首先导入'os'库,然后使用'path.exists'来确报数据文件的存在,然后才尝试打开文件,然后处理文件中的每一行
        只有当其中有一个:才处理,否则就忽略,处理完,关闭文件,如果未找到,则报告

import os
if os.path.exists('sketch1.txt'):
    data = open('sketch1.txt')
    for each_line in data:
        try:
           (rloe,line_spoken)=each_line.split(':', 1)
           print(rloe, end='')
           print(' said: ', end='')
           print(line_spoken, end='')
        except:
            pass
    
    data.close()
else:
    print('The data file is missing!')
-----------------------------------------------------
test02: 打开一个文件,处理其中数据行,抽取出说有感兴趣的数据,并显示在屏幕上,完成后关闭文件,
            如果出现 任何异常,这个代码会进行处理

   
try:
    data = open('sketch01.txt')
    for each_line in data:
        try:
           (rloe,line_spoken)=each_line.split(':', 1)
           print(rloe, end='')
           print(' said: ', end='')
           print(line_spoken, end='')
        except:
            pass
    
    data.close()
except:
        print('The data file is missing!')

        **************
        这种异常处理是将所有的异常一刀切,如果出现了一些未知的错误,我们将一无所知
        所以,就需要将except变得不那么一般

    ***需要以一种不那么一般化的方式使用except

  test03  

   
try:
    data = open('sketch01.txt')
    for each_line in data:
        try:
           (rloe,line_spoken)=each_line.split(':', 1)
           print(rloe, end='')
           print(' said: ', end='')
           print(line_spoken, end='')
        except  ValueErrror:
            pass
    
    data.close()
except IOError:
        print('The data file is missing!')





